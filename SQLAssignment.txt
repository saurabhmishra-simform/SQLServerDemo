create table EmployeeDetails
(EmpId int not null primary key,FullName nvarchar(300) not null,ManagerId int not null,DateOfJoining date not null,City nvarchar(300) not null);

CREATE TABLE EmployeeSalary
(EmpId int not null ,Project varchar(100) not null,Salary money not NULL,Variable int not null,CONSTRAINT FK_EmployeeSalary_EmpId FOREIGN KEY (EmpId)REFERENCES EmployeeDetails (EmpId));
    
insert into EmployeeDetails values
	(121,'John Snow',321,cast('31 Jan 2019' as date),'Toronto'),
    	(321,'Walter White',986,cast('30 Jan 2020' as date),'California'),
    	(421,'Kuldeep Rana',876,cast('27 NOV 2021' as date),'New Delhi');
	
insert into EmployeeSalary values
	(121,'P1',8000,500),
    (321,'P2',10000,1000),
    (421,'P1',12000,0);


------Question Answer 1 to 17-----------
select * from EmployeeDetails;
select * from EmployeeSalary;

Write an SQL query to fetch the count of employees working in project ‘P1’.

Ans: select count(EmpId) as TotalEmpCount from EmployeeSalary where Project = 'P1';

2)Write an SQL query to fetch all those employees who work on Projects other than P1.

Ans: select * from EmployeeSalary where Project != 'P1';

3)Write an SQL query to display the total salary of each employee adding the Salary with Variable value - It should be as 'TotalSalary' column.

Ans: select EmpId,salary + variable as TotalSalary from EmployeeSalary;

4)Write an SQL query to find the maximum, minimum, and average salary of the employees.

Ans: select max(salary) as MaximumSalary,min(salary) as MinimumSalary,avg(salary) as AverageSalary from EmployeeSalary;

5)Write an SQL query to find the employee id whose salary lies in the range of 9000 and 15000.

Ans: select EmpId from EmployeeSalary WHERE salary BETWEEN 9000 and 15000;

6)Write an SQL query to fetch those employees who live in Toronto and work under the manager with ManagerId – 321.

Ans: select * from EmployeeDetails where City = 'Toronto' and managerid = 321;

7)Write an SQL query to fetch the EmpIds that are present in both the tables – ‘EmployeeDetails’ and ‘EmployeeSalary.

Ans: select EmpId from EmployeeDetails UNION select EmpId from EmployeeSalary;

8)Write an SQL query to fetch the EmpIds that are present in EmployeeDetails but not in EmployeeSalary.

Ans: SELECT EmpId from EmployeeDetails INTERSECT SELECT EmpId from EmployeeSalary;

9)Write an SQL query to fetch the employee’s full names and replace the space with ‘-’.

Ans: select replace(FullName,' ','_') as FullName from EmployeeDetails;

10)Write an SQL query to display both the EmpId and ManagerId together.

Ans: select concat(EmpId,'-',ManagerId) as EmpId_ManagerId from EmployeeDetails;

11)Fetch all the employees who are not working on any project.

Ans: SELECT * from EmployeeDetails where EmpId in(SELECT EmpId from EmployeeSalary where project is Null);

12)Write an SQL query to fetch all employee records from the EmployeeDetails table who have a salary record in the EmployeeSalary table.

Ans: Using in clause :select * from EmployeeDetails where EmpId in(select EmpId from EmployeeSalary where salary is not NULL);
-- using exists clause:select * from EmployeeDetails E where EXISTS(SELECT EmpId from EmployeeSalary S where E.EmpId = S.EmpId); 

13)Write an SQL query to fetch duplicate records from EmployeeDetails.

Ans: select EmpId,FullName,ManagerId,DateOfJoining,City,count(*) from EmployeeDetails GROUP by EmpId,FullName,ManagerId,DateOfJoining,City HAVING COUNT(*)>1;

14)Write an SQL query to fetch only odd rows from the table.

Ans: SELECT * FROM ( SELECT *, Row_Number() OVER(ORDER BY EmpId) AS RowNumber FROM EmployeeDetails ) TempTable WHERE TempTable.RowNumber % 2 = 1;

15)Write an SQL query to create a new table with data and structure copied from another table.

Ans: select * into NewCopyEmployee from EmployeeDetails; 
--only stucture copy: select * into copy from EmployeeSalary where 1=0;

16)Write an SQL query to find the nth highest salary from a table.

Ans: Using subQuery:select max(Salary) as Salary from EmployeeSalary where salary < (select max(salary) from EmployeeSalary);
using top limit: select top 1 salary from (select Distinct top 2 * from EmployeeSalary order by Salary desc) SalaryResult order by Salary;

17)Write SQL query to find the 3rd highest salary from a table without using the TOP/limit keyword

Ans: Using CTE method
with NthHighestSalary As
(
	select EmpId,Salary,DENSE_RANK() over(order by Salary desc) as Rank from EmployeeSalary
)
select * from NthHighestSalary where Rank = 3;


-------------Join Query---------------------

create table Department
(department_id int primary key identity(1,1),department_name varchar(300));

create table Employees
(id int primary key identity(1,1),employee_name varchar(300),department_id int,Constraint FK_Employees_DepartmentId foreign key (department_id) references Department (department_id));

insert into Department values
	('Sales'),
	('Engineering'),
	('Human Resources'),
	('Customer Service'),
	('Research And Development');

insert into Employees values
	('Homer Simpson',4),
	('Ned Flanders',1),
	('Barney Gumble',5),
	('Clancy Wiggum',3),
	('Moe Syzslak',NULL);

---------Join Question Answer------------------
select * from Department;

select * from Employees;

select Dept.department_id,Emp.employee_name,Dept.department_name from Department Dept inner join Employees Emp on Dept.department_id = Emp.department_id order by Dept.department_id asc;

select * from Employees Emp left join Department Dept on Emp.department_id = Dept.department_id;

select * from Employees Emp right join Department Dept on Emp.department_id = Dept.department_id;

select * from Employees Emp left join Department Dept on Emp.department_id = Dept.department_id
union All
select * from Employees Emp right join Department Dept on Emp.department_id = Dept.department_id;
